View(rfImputation(gt))
devtools::load_all()
View(rfImputation(gt))
rfImputation(gt)
devtools::load_all()
View(rfImputation(gt))
devtools::load_all()
View(rfImputation(gt))
rfImputation(gt)
devtools::load_all()
View(rfImputation(gt))
devtools::load_all()
View(rfImputation(gt))
rfImputation(gt)
View(rfImputation(gt))
devtools::load_all()
View(rfImputation(gt))
View(kNNImputation(gt))
View(gt)
devtools::load_all()
kNNImputation(gt)
knn_impute(gt)
knn_impute(gt,3)
devtools::load_all()
knn_impute(gt,3)
kNNImputation()
write.t
devtools::load_all()
rlang::last_trace()
devtools::load_all()
data("real")
real
r <- calculateAlleleFreqs(real)
devtools::load_all()
imputeMissingData_int(r)
r_mean <- imputeMissingData_int(r)
View(r_mean@imp_gt)
r_kNN <- imputeMissingData_int(r)
r_kNN <- imputeMissingData_int(r, method = "kNN")
r_rf <- imputeMissingData_int(r, method = "rf")
View(r_kNN@imp_gt)
View(r_rf@imp_gt)
calculateAlleleFreqs(real, missing_data = "remove")
devtools::load_all()
r <- calculateAlleleFreqs(real)
r@missing_data
devtools::load_all()
r <- calculateAlleleFreqs(real)
r@missing_data
r <- calculateAlleleFreqs(real, missing_data = "bla")
r <- calculateAlleleFreqs(real, missing_data = "remove", threshold = 0.2)
r <- calculateAlleleFreqs(real)
r@sep_gt
devtools::load_all()
r <- calculateAlleleFreqs(real)
r <- calculateAlleleFreqs(real, missing_data = "remove", threshold = 0)
r@sep_gt
r <- calculateAlleleFreqs(real, missing_data = "impute", method = "mean")
r@imp_gt
r <- calculateAlleleFreqs(real, missing_data = "impute", method = "kNN")
r <- calculateAlleleFreqs(real, missing_data = "impute", method = "rf")
data("real")
devtools::load_all()
data("mys")
data("real")
data("sim")
s <- calculateAlleleFreqs(s)
s <- calculateAlleleFreqs(sim)
WindowedPi(s, window_size = 100000)
devtools::load_all()
WindowedPi(s, window_size = 100000)
devtools::load_all()
WindowedPi(s, window_size = 100000)
devtools::load_all()
WindowedPi(s, window_size = 100000)
devtools::load_all()
data("real")
r <- calculateAlleleFreqs(real)
WindowedPi(r, window_size = 100000)
devtools::load_all()
WindowedPi(r, window_size = 100000)
devtools::load_all()
WindowedPi(r, window_size = 100000)
r <- calculateAlleleFreqs(real, missing_data = "remove", threshold = 0)
r@sep_gt
WindowedPi(r, window_size = 100000)
r <- calculateAlleleFreqs(real, missing_data = "remove", threshold = 0.1)
WindowedPi(r, window_size = 100000)
r <- calculateAlleleFreqs(real, missing_data = "remove", threshold = 0.2)
WindowedPi(r, window_size = 100000)
r <- calculateAlleleFreqs(real, missing_data = "impute", method = "kNN")
WindowedPi(r, window_size = 100000)
r <- calculateAlleleFreqs(real, missing_data = "impute", method = "rf")
WindowedPi(r, window_size = 100000)
r <- calculateAlleleFreqs(real, missing_data = "impute", method = "mean")
WindowedPi(r, window_size = 100000)
devtools::document()
data("mys")
devtools::load_all()
devtools::load_all()
Pi(mys, 10000)
devtools::load_all()
Pi(mys, 10000)
data("real")
r <- calculateAlleleFreqs(real, missing_data = "impute", method = "mean")
WindowedPi(r, window_size = 265400)
Pi(r, seq_length = 265400)
devtools::load_all()
devtools::load_all()
calculateWindowedMetric(r, Pi, window_size = 100000)
devtools::load_all()
calculateWindowedMetric(r, Pi, window_size = 100000)
devtools::load_all()
calculateWindowedMetric(r, Pi, window_size = 100000)
devtools::load_all()
calculateWindowedMetric(r, Pi, window_size = 100000)
devtools::load_all()
calculateWindowedMetric(r, Pi, window_size = 100000)
devtools::load_all()
calculateWindowedMetric(r, Pi, window_size = 100000)
devtools::load_all()
calculateWindowedMetric(r, Pi, window_size = 100000)
devtools::load_all()
calculateWindowedMetric(r, Pi, window_size = 100000)
devtools::load_all()
calculateWindowedMetric(r, Pi, window_size = 100000)
devtools::load_all()
calculateWindowedMetric(r, Pi, window_size = 100000)
calculateWindowedMetric(r, Heterozygosity, window_size = 100000)
calculateWindowedMetric(r, SingeltonSites, window_size = 100000)
x<-calculateWindowedMetric(r, Heterozygosity, window_size = 100000)
x
x$NW_023416326.1
x$NW_023416326.1[[1]]
x$NW_023416326.1[[1]]
devtools::load_all()
x<-calculateWindowedMetric(r, Heterozygosity, window_size = 100000)
x$NW_023416326.1[[ยน]]
x$NW_023416326.1[[1]]
Heterozygosity()
Heterozygosity(mys)
devtools::load_all()
ObservedHeterozygosity(mys)
ExpectedHeterozygosity(mys)
x<-calculateWindowedMetric(r, ObservedHeterozygosity, window_size = 100000)
x
devtools::load_all()
x<-calculateWindowedMetric(r, PrivateAlleles, window_size = 100000)
x<-calculateWindowedMetric(r, ObservedHeterozygosity, window_size = 100000)
data("dav")
calculateWindowedMetric(list(mys, dav), PrivateAlleles, window_size = 100000)
devtools::load_all()
x<-calculateWindowedMetric(r, ObservedHeterozygosity, window_size = 100000)
x
calculateWindowedMetric(r, ObservedHeterozygosity, window_size = 100000)
calculateWindowedMetric(r, Pi, window_size = 100000)
devtools::load_all()
calculateWindowedMetric(r, ObservedHeterozygosity, window_size = 100000)
?clusterExport
clusterExport
clusterExport()
devtools::document()
devtools::document()
devtools::load_all()
library(GenoPop)
calculateWindowedMetric(r, ObservedHeterozygosity, window_size = 100000)
parallel::clusterExport()
clusterExport()
devtools::load_all()
calculateWindowedMetric(r, ObservedHeterozygosity, window_size = 100000)
devtools::load_all()
calculateWindowedMetric(r, ObservedHeterozygosity, window_size = 100000)
devtools::load_all()
calculateWindowedMetric(r, ObservedHeterozygosity, window_size = 100000)
devtools::load_all()
calculateWindowedMetric(r, ObservedHeterozygosity, window_size = 100000)
print("bla")
calculateWindowedMetric(r, ObservedHeterozygosity, window_size = 100000)
x <- calculateWindowedMetric(r, ObservedHeterozygosity, window_size = 100000)
x$NW_023416326.1
unlist(x)
devtools::load_all()
x <- calculateWindowedMetric(r, ObservedHeterozygosity, window_size = 100000)
x
devtools::load_all()
x <- calculateWindowedMetric(r, ObservedHeterozygosity, window_size = 100000)
x
devtools::load_all()
x <- calculateWindowedMetric(r, ObservedHeterozygosity, window_size = 100000)
devtools::load_all()
x <- calculateWindowedMetric(r, ObservedHeterozygosity, window_size = 100000)
devtools::load_all()
x <- calculateWindowedMetric(r, ObservedHeterozygosity, window_size = 100000)
x
devtools::load_all()
x <- calculateWindowedMetric(r, ObservedHeterozygosity, window_size = 100000)
x
devtools::load_all()
x <- calculateWindowedMetric(r, ObservedHeterozygosity, window_size = 100000)
x
x <- calculateWindowedMetric(r, ObservedHeterozygosity, window_size = 1000)
x <- calculateWindowedMetric(r, ObservedHeterozygosity, window_size = 10000)
View(x)
devtools::load_all()
x <- calculateWindowedMetric(r, ObservedHeterozygosity, window_size = 10000)
View(x)
View(x)
x <- calculateWindowedMetric(r, ObservedHeterozygosity, window_size = 1000)
devtools::load_all()
x <- calculateWindowedMetric(r, ObservedHeterozygosity, window_size = 1000)
devtools::load_all()
x <- calculateWindowedMetric(r, ObservedHeterozygosity, window_size = 1000)
devtools::load_all()
x <- calculateWindowedMetric(r, ObservedHeterozygosity, window_size = 1000)
devtools::load_all()
x <- calculateWindowedMetric(r, ObservedHeterozygosity, window_size = 1000)
devtools::load_all()
devtools::load_all()
devtools::load_all()
x <- calculateWindowedMetric(r, ObservedHeterozygosity, window_size = 1000)
devtools::load_all()
x <- calculateWindowedMetric(r, ObservedHeterozygosity, window_size = 1000)
x
devtools::load_all()
x <- calculateWindowedMetric(r, ObservedHeterozygosity, window_size = 1000)
View(r@fix)
devtools::load_all()
x <- calculateWindowedMetric(r, ObservedHeterozygosity, window_size = 1000)
devtools::load_all()
x <- calculateWindowedMetric(r, ObservedHeterozygosity, window_size = 1000)
x <- calculateWindowedMetric(r, Pi, window_size = 1000)
devtools::load_all()
x <- calculateWindowedMetric(r, Pi, window_size = 1000)
devtools::load_all()
x <- calculateWindowedMetric(r, Pi, window_size = 1000)
devtools::load_all()
x <- calculateWindowedMetric(r, Pi, window_size = 1000)
devtools::load_all()
x <- calculateWindowedMetric(r, Pi, window_size = 1000)
devtools::load_all()
rlang::last_trace()
devtools::load_all()
x <- calculateMultiPopWindowedMetric(list(mys, dav), PrivateAlleles, window_size = 100000)
devtools::load_all()
x <- calculateMultiPopWindowedMetric(list(mys, dav), PrivateAlleles, window_size = 100000)
devtools::load_all()
x <- calculateMultiPopWindowedMetric(list(mys, dav), PrivateAlleles, window_size = 100000)
devtools::load_all()
x <- calculateMultiPopWindowedMetric(list(mys, dav), PrivateAlleles, window_size = 100000)
devtools::load_all()
x <- calculateMultiPopWindowedMetric(list(mys, dav), PrivateAlleles, window_size = 100000)
PrivateAlleles(list(mys, dav))
class(PrivateAlleles(list(mys, dav)))
typeof(PrivateAlleles(list(mys, dav)))
length(PrivateAlleles(list(mys, dav)))
devtools::load_all()
x <- calculateMultiPopWindowedMetric(list(mys, dav), PrivateAlleles, window_size = 100000)
x <- calculateTwoPopWindowedMetric(list(mys, dav), PrivateAlleles, window_size = 100000)
devtools::load_all()
x <- calculateTwoPopWindowedMetric(list(mys, dav), PrivateAlleles, window_size = 100000)
devtools::load_all()
TajimasD(mys)
TajimasD(mys, 1000)
devtools::load_all()
TajimasD(mys, 1000)
r
TajimasD(r, 265393)
devtools::load_all()
TajimasD(r, 265393)
data("sim")
s <- calculateAlleleFreqs(s)
s <- calculateAlleleFreqs(sim)
TajimasD(s, 401996)
calculateWindowedMetric(s, window_size = 100000)
calculateWindowedMetric(s, TajimasD, window_size = 100000)
calculateWindowedMetric(s, window_size = 100000)
calculateWindowedMetric(s, TajimasD, window_size = 100000)
calculateWindowedMetric(s, TajimasD, window_size = 100000)
calculateWindowedMetric(s, TajimasD, window_size = 100000)
calculateWindowedMetric(s, TajimasD, window_size = 200000)
calculateWindowedMetric(s, Pi, window_size = 200000)
calculateWindowedMetric(s, SegregatingSites(), window_size = 200000)
calculateWindowedMetric(s, SegregatingSites, window_size = 200000)
calculateWindowedMetric(r, SegregatingSites, window_size = 200000)
devtools::load_all()
calculateWindowedMetric(r, SegregatingSites, window_size = 200000)
calculateWindowedMetric(s, SegregatingSites, window_size = 200000)
devtools::load_all()
devtools::load_all()
calculateWindowedMetric(s, SegregatingSites, window_size = 200000)
devtools::load_all()
calculateWindowedMetric(s, SegregatingSites, window_size = 200000)
devtools::load_all()
calculateWindowedMetric(s, SegregatingSites, window_size = 200000)
devtools::load_all()
calculateWindowedMetric(s, SegregatingSites, window_size = 200000)
devtools::load_all()
calculateWindowedMetric(s, SegregatingSites, window_size = 200000)
devtools::load_all()
calculateWindowedMetric(s, SegregatingSites, window_size = 200000)
devtools::load_all()
calculateWindowedMetric(s, SegregatingSites, window_size = 200000)
s@imp_gt
is.null(s@imp_gt)
nrow(s$imp_gt)
nrow(s@imp_gt)
devtools::load_all()
calculateWindowedMetric(s, SegregatingSites, window_size = 200000)
calculateWindowedMetric(s, SegregatingSites, window_size = 200000)
calculateWindowedMetric(s, Pi, window_size = 200000)
devtools::load_all()
calculateWindowedMetric(s, Pi, window_size = 200000)
calculateWindowedMetric(s, TajimasD, window_size = 200000)
calculateWindowedMetric(s, TajimasD, window_size = 100000)
devtools::load_all()
calculateWindowedMetric(s, TajimasD, window_size = 100000)
calculateTajimasD <- function(pi, S, n) {
# Ensure the inputs are valid
if(n < 2) stop("n must be at least 2")
if(S < 0 || pi < 0) stop("S and pi cannot be negative")
# Step 1: Calculate a1 and a2, which are summations used in the denominator of Tajima's D
# These summations are over 1/i and 1/i^2, respectively, from i = 1 to (n-1)
i_values <- 1:(n-1)
a1 <- sum(1 / i_values)
a2 <- sum(1 / (i_values^2))
# Step 2: Calculate b1 and b2, constants used for the estimation of the variance
b1 <- (n + 1) / (3 * (n - 1))
b2 <- (2 * (n^2 + n + 3)) / (9 * n * (n - 1))
# Step 3: Calculate c1 and c2, which scale b1 and b2 by a1 and a2 to get the actual variance components
c1 <- b1 - (1 / a1)
c2 <- b2 - ((n + 2) / (a1 * n)) + (a2 / (a1^2))
# Step 4: Calculate e1 and e2, which are used in the denominator of Tajima's D
# These represent the expectations of the variance and covariance, respectively
e1 <- c1 / a1
e2 <- c2 / (a1^2 + a2)
# Step 5: Calculate the denominator of Tajima's D, which is the square root of the variance of the difference between pi and S/a1
denominator <- sqrt((e1 * S) + (e2 * S * (S - 1)))
# Step 6: Calculate Tajima's D
# This is the difference between pi and the mean number of pairwise differences (S/a1), divided by the standard deviation (denominator)
D <- (pi - (S / a1)) / denominator
return(D)
}
calculateTajimasD(3.888889, (16/41), 10)
(16/41)
calculateTajimasD(3.888889, 0.3902439, 10)
calculateTajimasD <- function(pi, S, n) {
# Ensure the inputs are valid
if(n < 2) stop("n must be at least 2")
if(S < 0 || pi < 0) stop("S and pi cannot be negative")
# Step 1: Calculate a1 and a2, which are summations used in the denominator of Tajima's D
# These summations are over 1/i and 1/i^2, respectively, from i = 1 to (n-1)
i_values <- 1:(n-1)
a1 <- sum(1 / i_values)
a2 <- sum(1 / (i_values^2))
# Step 2: Calculate b1 and b2, constants used for the estimation of the variance
b1 <- (n + 1) / (3 * (n - 1))
b2 <- (2 * (n^2 + n + 3)) / (9 * n * (n - 1))
# Step 3: Calculate c1 and c2, which scale b1 and b2 by a1 and a2 to get the actual variance components
c1 <- b1 - (1 / a1)
c2 <- b2 - ((n + 2) / (a1 * n)) + (a2 / (a1^2))
# Step 4: Calculate e1 and e2, which are used in the denominator of Tajima's D
# These represent the expectations of the variance and covariance, respectively
e1 <- c1 / a1
e2 <- c2 / (a1^2 + a2)
# Step 5: Calculate the denominator of Tajima's D, which is the square root of the variance of the difference between pi and S/a1
denominator <- sqrt((e1 * S) + (e2 * S * (S - 1)))
# Step 6: Calculate Tajima's D
# This is the difference between pi and the mean number of pairwise differences (S/a1), divided by the standard deviation (denominator)
D <- (pi - (S / a1)) / denominator
return(c(D, a1, a2, b1, b2, c1, c2, e1, e2))
}
calculateTajimasD(3.888889, 0.3902439, 10)
calculateTajimasD(3.888889, 16, 10)
calculateTajimasD(3.888889/41, 16/41, 10)
calculateWindowedMetric(s, Pi, window_size = 100000)
devtools::load_all()
calculateWindowedMetric(s, Pi, window_size = 100000)
calculateWindowedMetric(s, TajimasD(), window_size = 100000)
calculateWindowedMetric(s, TajimasD, window_size = 100000)
devtools::load_all()
calculateWindowedMetric(s, TajimasD, window_size = 100000)
calculateWindowedMetric(s, Pi, window_size = 100000)
calculateWindowedMetric(s, TajimasD, window_size = 100000)
devtools::load_all()
calculateWindowedMetric(s, TajimasD, window_size = 100000)
devtools::load_all()
calculateWindowedMetric(s, TajimasD, window_size = 100000)
calculateWindowedMetric(s, SegregatingSites, window_size = 100000)
calculateWindowedMetric(r, SegregatingSites, window_size = 100000)
calculateWindowedMetric(s, SegregatingSites, window_size = 100000)
calculateWindowedMetric(s, Pi, window_size = 100000)
devtools::load_all()
data("sim")
s <- calculateAlleleFreqs(sim)
calculateWindowedMetric(s, TajimasD, window_size = 100000)
TajimasD(s)
TajimasD(s, 401996)
devtools::load_all()
TajimasD(s, 401996)
devtools::load_all()
TajimasD(s, 401996)
calculateWindowedMetric(s, TajimasD, window_size = 100000)
devtools::load_all()
WattersonsTheta(s)
nr
nrow
nrow(s@sep_gt)
devtools::load_all()
devtools::load_all()
WattersonsTheta(s, 401996)
head(s@sep_gt[1:6,])
head(s@sep_gt[,1:6])
head(s@allele_freqs)
data("real")
r <- calculateAlleleFreqs(real)
head(r@sep_gt)
as.numeric(head(r@sep_gt))
genotype_matrix <- head(r@sep_gt)
matrix(0, nrow = nrow(genotype_matrix), ncol = ncol(genotype_matrix))
genotype_matrix[genotype_matrix == "."] <- NA
genotype_matrix
as.matrix(apply(genotype_matrix, c(1, 2), as.numeric))
devtools::load_all()
OneDimSFS(s)
OneDimSFS(s, folded = TRUE)
devtools::load_all()
OneDimSFS(s, folded = TRUE)
OneDimSFS(s, folded = FALSE)
devtools::load_all()
OneDimSFS(s, folded = TRUE)
OneDimSFS(s, folded = FALSE)
OneDimSFS(s, folded = TRUE)
devtools::load_all()
OneDimSFS(s, folded = TRUE)
devtools::load_all()
OneDimSFS(s, folded = TRUE)
OneDimSFS(s, folded = FALSE)
f <- OneDimSFS(s, folded = TRUE)
u <- OneDimSFS(s, folded = FALSE)
f
u
sum(f)
sum(u)
nrow(s@sep_gt)
head(s@fix)
?merge
x <. c(1,2,3)
x <- c(1,2,3)
y <- c(2,3,4)
merge(x,y)
devtools::load_all()
data("dav")
mys
data("mys")
TwoDimSFS(list("mys", "dav"))
mys@fix
objects <- list(mys, dav)
objects[[1]]@fix
TwoDimSFS(list(mys, dav))
TwoDimSFS(list(mys, dav))
TwoDimSFS(list(mys, dav))
devtools::load_all()
TwoDimSFS(list(mys, dav))
nrow(mys@fix)
nrow(dav@fix)
devtools::load_all()
TwoDimSFS(list(mys, dav))
devtools::load_all()
TwoDimSFS(list(mys, dav))
devtools::load_all()
TwoDimSFS(list(mys, dav))
TwoDimSFS(list(mys, dav), folded = FALSE)
TwoDimSFS(list(mys, dav), folded = TRUE)
TwoDimSFS(list(mys, dav), folded = FALSE)
devtools::load_all()
TwoDimSFS(list(mys, dav), folded = FALSE)
TwoDimSFS(list(mys, dav), folded = TRUE)
devtools::load_all()
TwoDimSFS(list(mys, dav), folded = TRUE)
devtools::load_all()
TwoDimSFS(list(mys, dav), folded = TRUE)
devtools::load_all()
TwoDimSFS(list(mys, dav), folded = TRUE)
devtools::load_all()
TwoDimSFS(list(mys, dav), folded = TRUE)
devtools::load_all()
TwoDimSFS(list(mys, dav), folded = TRUE)
devtools::load_all()
TwoDimSFS(list(mys, dav), folded = TRUE)
devtools::load_all()
TwoDimSFS(list(mys, dav), folded = TRUE)
TwoDimSFS(list(mys, dav), folded = FALSE)
devtools::load_all()
FuLiD(mys)
devtools::load_all()
FuLiD(mys)
FuLiD(s)
FuLiD(dav)
FuLiD(r)
devtools::load_all()
FuLiD(r)
devtools::load_all()
FuLiD(r)
FuLiD(s)
FuLiD(mys)
FuLiD(dav)
devtools::load_all()
Fst(mys)
Fst(list(mys,dav))
devtools::load_all()
Fst(list(mys,dav))
class(mys@allele_freqs)
