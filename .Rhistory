calculateWindowedMetric(r, SegregatingSites, window_size = 100000)
calculateWindowedMetric(s, SegregatingSites, window_size = 100000)
calculateWindowedMetric(s, Pi, window_size = 100000)
devtools::load_all()
data("sim")
s <- calculateAlleleFreqs(sim)
calculateWindowedMetric(s, TajimasD, window_size = 100000)
TajimasD(s)
TajimasD(s, 401996)
devtools::load_all()
TajimasD(s, 401996)
devtools::load_all()
TajimasD(s, 401996)
calculateWindowedMetric(s, TajimasD, window_size = 100000)
devtools::load_all()
WattersonsTheta(s)
nr
nrow
nrow(s@sep_gt)
devtools::load_all()
devtools::load_all()
WattersonsTheta(s, 401996)
head(s@sep_gt[1:6,])
head(s@sep_gt[,1:6])
head(s@allele_freqs)
data("real")
r <- calculateAlleleFreqs(real)
head(r@sep_gt)
as.numeric(head(r@sep_gt))
genotype_matrix <- head(r@sep_gt)
matrix(0, nrow = nrow(genotype_matrix), ncol = ncol(genotype_matrix))
genotype_matrix[genotype_matrix == "."] <- NA
genotype_matrix
as.matrix(apply(genotype_matrix, c(1, 2), as.numeric))
devtools::load_all()
OneDimSFS(s)
OneDimSFS(s, folded = TRUE)
devtools::load_all()
OneDimSFS(s, folded = TRUE)
OneDimSFS(s, folded = FALSE)
devtools::load_all()
OneDimSFS(s, folded = TRUE)
OneDimSFS(s, folded = FALSE)
OneDimSFS(s, folded = TRUE)
devtools::load_all()
OneDimSFS(s, folded = TRUE)
devtools::load_all()
OneDimSFS(s, folded = TRUE)
OneDimSFS(s, folded = FALSE)
f <- OneDimSFS(s, folded = TRUE)
u <- OneDimSFS(s, folded = FALSE)
f
u
sum(f)
sum(u)
nrow(s@sep_gt)
head(s@fix)
?merge
x <. c(1,2,3)
x <- c(1,2,3)
y <- c(2,3,4)
merge(x,y)
devtools::load_all()
data("dav")
mys
data("mys")
TwoDimSFS(list("mys", "dav"))
mys@fix
objects <- list(mys, dav)
objects[[1]]@fix
TwoDimSFS(list(mys, dav))
TwoDimSFS(list(mys, dav))
TwoDimSFS(list(mys, dav))
devtools::load_all()
TwoDimSFS(list(mys, dav))
nrow(mys@fix)
nrow(dav@fix)
devtools::load_all()
TwoDimSFS(list(mys, dav))
devtools::load_all()
TwoDimSFS(list(mys, dav))
devtools::load_all()
TwoDimSFS(list(mys, dav))
TwoDimSFS(list(mys, dav), folded = FALSE)
TwoDimSFS(list(mys, dav), folded = TRUE)
TwoDimSFS(list(mys, dav), folded = FALSE)
devtools::load_all()
TwoDimSFS(list(mys, dav), folded = FALSE)
TwoDimSFS(list(mys, dav), folded = TRUE)
devtools::load_all()
TwoDimSFS(list(mys, dav), folded = TRUE)
devtools::load_all()
TwoDimSFS(list(mys, dav), folded = TRUE)
devtools::load_all()
TwoDimSFS(list(mys, dav), folded = TRUE)
devtools::load_all()
TwoDimSFS(list(mys, dav), folded = TRUE)
devtools::load_all()
TwoDimSFS(list(mys, dav), folded = TRUE)
devtools::load_all()
TwoDimSFS(list(mys, dav), folded = TRUE)
devtools::load_all()
TwoDimSFS(list(mys, dav), folded = TRUE)
TwoDimSFS(list(mys, dav), folded = FALSE)
devtools::load_all()
FuLiD(mys)
devtools::load_all()
FuLiD(mys)
FuLiD(s)
FuLiD(dav)
FuLiD(r)
devtools::load_all()
FuLiD(r)
devtools::load_all()
FuLiD(r)
FuLiD(s)
FuLiD(mys)
FuLiD(dav)
devtools::load_all()
Fst(mys)
Fst(list(mys,dav))
devtools::load_all()
Fst(list(mys,dav))
class(mys@allele_freqs)
devtools::load_all()
mys1 <- c("8449", "8128", "8779")
mys2 <- c("8816", "8823", "8157")
individuals <- c(mys1, mys2)
pop_names <- c(rep("mys1", length(mys1)), rep("mys2", length(mys2)))
pop_assignments <- setNames(pop_names, individuals)
data("mys", package = "GenoPop")
Fst(mys, pop_assignments)
calculateWindowedMetric()
calculateWindowedMetric(mys, Pi)
devtools::load_all()
calculateWindowedMetric(mys, Pi)
calculateWindowedMetric(mys, Pi, window_size = 10000)
calculateWindowedMetric(mys, Pi, window_size = 100000)
calculateWindowedMetric(mys, Fst, window_size = 100000)
error()
devtools::load_all()
calculateWindowedMetric(mys, Fst, window_size = 100000)
calculateWindowedMetric(mys, Fst, pop_assignments = pop_assignments, window_size = 100000)
history()
devtools::load_all()
Fst(mys, c())
devtools::load_all()
calculateWindowedMetric(mys, Fst, pop_assignments = pop_assignments, window_size = 100000)
devtools::load_all()
devtools::load_all()
calculateWindowedMetric(mys, Fst, pop_assignments = pop_assignments, window_size = 100000)
library(GenoPop)
devtools::load_all()
mys1 <- c("8449", "8128", "8779")
mys2 <- c("8816", "8823", "8157")
individuals <- c(mys1, mys2)
pop_names <- c(rep("mys1", length(mys1)), rep("mys2", length(mys2)))
pop_assignments <- setNames(pop_names, individuals)
data("mys", package = "GenoPop")
Fst(mys, pop_assignments)
pop_assignments
Fst(mys, pop_assignments)
devtools::load_all()
Fst(mys, pop_assignments)
mys1 <- c("8449", "8128", "8779")
mys2 <- c("8816", "8823", "8157")
individuals <- c(mys1, mys2)
pop_names <- c(rep("mys1", length(mys1)), rep("mys2", length(mys2)))
pop_assignments <- setNames(pop_names, individuals)
data("mys", package = "GenoPop")
Fst(mys, pop_assignments)
data(real)
mys <- c("8449", "8128", "8779", "8816", "8823", "8157")
dav <- c("8213", "8241", "8232", "8224", "10165", "8221", "8813", "8825", "8182", "8187")
individuals <- c(mys, dav)
pop_names <- c(rep("mys", length(mys)), rep("dav", length(dav)))
pop_assignments <- setNames(pop_names, individuals)
Fst(real, pop_assignments)
r <- calculateAlleleFreqs(real)
Fst(real, pop_assignments)
Fst(r, pop_assignments)
library(GenoPop)
devtools::load_all()
mys1 <- c("8449", "8128", "8779")
mys2 <- c("8816", "8823", "8157")
individuals <- c(mys1, mys2)
pop_names <- c(rep("mys1", length(mys1)), rep("mys2", length(mys2)))
pop_assignments <- setNames(pop_names, individuals)
data("mys", package = "GenoPop")
Fst(mys, pop_assignments)
PrivateAlleles(mys, pop_assignments)
View(mys@gt)
dav <- c("8213", "8241", "8232", "8224", "10165", "8221", "8813", "8825", "8182", "8187")
individuals <- c(mys, dav)
mys <- c("8449", "8128", "8779", "8816", "8823", "8157")
dav <- c("8213", "8241", "8232", "8224", "10165", "8221", "8813", "8825", "8182", "8187")
individuals <- c(mys, dav)
pop_names <- c(rep("mys", length(mys)), rep("dav", length(dav)))
pop_assignments <- setNames(pop_names, individuals)
data(real)
seperateByPopulations(vcf, pop_assignments)
seperateByPopulations(ral, pop_assignments)
seperateByPopulations(real, pop_assignments)
devtools::load_all()
seperateByPopulations(real, pop_assignments)
mys1 <- c("8449", "8128", "8779")
mys2 <- c("8816", "8823", "8157")
individuals <- c(mys1, mys2)
pop_names <- c(rep("mys1", length(mys1)), rep("mys2", length(mys2)))
pop_assignments <- setNames(pop_names, individuals)
data("mys", package = "GenoPop")
Fst(mys, pop_assignments)
library(GenoPop)
devtools::load_all()
Fst(mys, pop_assignments)
devtools::load_all()
devtools::load_all()
PrivateAlleles(mys, pop_assignments)
devtools::load_all()
devtools::load_all()
Fst(mys, pop_assignments)
devtools::use_test("Fst")
install.packages("usethis")
install.packages("usethis")
library(usethis)
use_test("Fst")
devtools::load_all()
calculateWindowedMetric()
calculateWindowedMetric(mys, Fst, window_size = 100000, pop_assignments = pop_assignments)
library(doMC)
calculateWindowedMetric(mys, Fst, window_size = 100000, pop_assignments = pop_assignments)
calculateWindowedMetric(mys, Fst, window_size = 10000, pop_assignments = pop_assignments)
calculateWindowedMetric(mys, Fst, window_size = 100, pop_assignments = pop_assignments)
calculateWindowedMetric(mys, Fst, window_size = 1000, pop_assignments = pop_assignments)
devtools::load_all()
calculateWindowedMetric(mys, Fst, window_size = 1000, pop_assignments = pop_assignments)
devtools::load_all()
calculateWindowedMetric(mys, Fst, window_size = 1000, pop_assignments = pop_assignments)
devtools::load_all()
calculateWindowedMetric(mys, Fst, window_size = 1000, pop_assignments = pop_assignments)
devtools::load_all()
calculateWindowedMetric(mys, Fst, window_size = 1000, pop_assignments = pop_assignments)
devtools::load_all()
calculateWindowedMetric(mys, Fst, window_size = 1000, pop_assignments = pop_assignments)
devtools::load_all()
calculateWindowedMetric(mys, Fst, window_size = 1000, pop_assignments = pop_assignments)
devtools::load_all()
calculateWindowedMetric(mys, Fst, window_size = 1000, pop_assignments = pop_assignments)
devtools::load_all()
calculateWindowedMetric(mys, Fst, window_size = 1000, pop_assignments = pop_assignments)
devtools::load_all()
calculateWindowedMetric(mys, Fst, window_size = 1000, pop_assignments = pop_assignments)
devtools::load_all()
calculateWindowedMetric(mys, Fst, window_size = 1000, pop_assignments = pop_assignments)
devtools::load_all()
calculateWindowedMetric(mys, Fst, window_size = 1000, pop_assignments = pop_assignments)
devtools::load_all()
calculateWindowedMetric(mys, Fst, window_size = 1000, pop_assignments = pop_assignments)
warnings()
devtools::load_all()
devtools::load_all()
calculateWindowedMetric(mys, Fst, window_size = 1000, pop_assignments = pop_assignments)
calculateWindowedMetric(mys, PrivateAlleles, window_size = 1000, pop_assignments = pop_assignments)
devtools::load_all()
calculateWindowedMetric(mys, PrivateAlleles, window_size = 1000, pop_assignments = pop_assignments)
devtools::load_all()
calculateWindowedMetric(mys, PrivateAlleles, window_size = 1000, pop_assignments = pop_assignments)
devtools::load_all()
calculateWindowedMetric(mys, PrivateAlleles, window_size = 1000, pop_assignments = pop_assignments)
devtools::load_all()
calculateWindowedMetric(mys, PrivateAlleles, window_size = 1000, pop_assignments = pop_assignments)
devtools::load_all()
calculateWindowedMetric(mys, PrivateAlleles, window_size = 1000, pop_assignments = pop_assignments)
devtools::load_all()
calculateWindowedMetric(mys, PrivateAlleles, window_size = 1000, pop_assignments = pop_assignments)
devtools::load_all()
calculateWindowedMetric(mys, PrivateAlleles, window_size = 1000, pop_assignments = pop_assignments)
devtools::load_all()
calculateWindowedMetric(mys, PrivateAlleles, window_size = 1000, pop_assignments = pop_assignments)
calculateWindowedMetric(mys, PrivateAlleles, window_size = 1000, pop_assignments = pop_assignments)
devtools::load_all()
calculateWindowedMetric(mys, PrivateAlleles, window_size = 1000, pop_assignments = pop_assignments)
devtools::load_all()
calculateWindowedMetric(mys, PrivateAlleles, window_size = 1000, pop_assignments = pop_assignments)
devtools::load_all()
calculateWindowedMetric(mys, PrivateAlleles, window_size = 1000, pop_assignments = pop_assignments)
devtools::load_all()
calculateWindowedMetric(mys, PrivateAlleles, window_size = 1000, pop_assignments = pop_assignments)
devtools::load_all()
calculateWindowedMetric(mys, PrivateAlleles, window_size = 1000, pop_assignments = pop_assignments)
devtools::load_all()
calculateWindowedMetric(mys, PrivateAlleles, window_size = 1000, pop_assignments = pop_assignments)
devtools::load_all()
calculateWindowedMetric(mys, PrivateAlleles, window_size = 1000, pop_assignments = pop_assignments)
x <- c(FALSE, FALSE, FALSE)
all(x)
all(!x)
devtools::load_all()
calculateWindowedMetric(mys, PrivateAlleles, window_size = 1000, pop_assignments = pop_assignments)
devtools::load_all()
calculateWindowedMetric(mys, PrivateAlleles, window_size = 1000, pop_assignments = pop_assignments)
devtools::load_all()
calculateWindowedMetric(mys, PrivateAlleles, window_size = 1000, pop_assignments = pop_assignments)
devtools::load_all()
calculateWindowedMetric(mys, PrivateAlleles, window_size = 1000, pop_assignments = pop_assignments)
View(mys@fix)
devtools::load_all()
calculateWindowedMetric(mys, PrivateAlleles, window_size = 1000, pop_assignments = pop_assignments)
devtools::load_all()
calculateWindowedMetric(mys, PrivateAlleles, window_size = 1000, pop_assignments = pop_assignments)
devtools::load_all()
calculateWindowedMetric(mys, PrivateAlleles, window_size = 1000, pop_assignments = pop_assignments)
devtools::load_all()
calculateWindowedMetric(mys, PrivateAlleles, window_size = 1000, pop_assignments = pop_assignments)
devtools::load_all()
calculateWindowedMetric(mys, PrivateAlleles, window_size = 1000, pop_assignments = pop_assignments)
devtools::load_all()
calculateWindowedMetric(mys, PrivateAlleles, window_size = 1000, pop_assignments = pop_assignments)
devtools::load_all()
calculateWindowedMetric(mys, PrivateAlleles, window_size = 1000, pop_assignments = pop_assignments)
devtools::load_all()
calculateWindowedMetric(mys, PrivateAlleles, window_size = 1000, pop_assignments = pop_assignments)
devtools::load_all()
calculateWindowedMetric(mys, PrivateAlleles, window_size = 1000, pop_assignments = pop_assignments)
devtools::load_all()
calculateWindowedMetric(mys, PrivateAlleles, window_size = 1000, pop_assignments = pop_assignments)
devtools::load_all()
calculateWindowedMetric(mys, PrivateAlleles, window_size = 1000, pop_assignments = pop_assignments)
devtools::load_all()
calculateWindowedMetric(mys, PrivateAlleles, window_size = 1000, pop_assignments = pop_assignments)
devtools::load_all()
calculateWindowedMetric(mys, PrivateAlleles, window_size = 1000, pop_assignments = pop_assignments)
devtools::load_all()
calculateWindowedMetric(mys, PrivateAlleles, window_size = 1000, pop_assignments = pop_assignments)
devtools::load_all()
calculateWindowedMetric(mys, PrivateAlleles, window_size = 1000, pop_assignments = pop_assignments)
devtools::load_all()
calculateWindowedMetric(mys, PrivateAlleles, window_size = 1000, pop_assignments = pop_assignments)
devtools::load_all()
calculateWindowedMetric(mys, PrivateAlleles, window_size = 1000, pop_assignments = pop_assignments)
devtools::load_all()
calculateWindowedMetric(mys, PrivateAlleles, window_size = 1000, pop_assignments = pop_assignments)
devtools::load_all()
calculateWindowedMetric(mys, PrivateAlleles, window_size = 1000, pop_assignments = pop_assignments)
use_test("calculateWindowedMetric")
calculateWindowedMetric(mys, FixedSites, window_size = 1000, pop_assignments = pop_assignments)
c <- calculateWindowedMetric(mys, FixedSites, window_size = 1000, pop_assignments = pop_assignments)
nrow(c)
calculateWindowedMetric(mys, PrivateAlleles, window_size = 1000, pop_assignments = pop_assignments)
devtools::load_all()
calculateWindowedMetric(mys, PrivateAlleles, window_size = 1000, pop_assignments = pop_assignments)
library(GenoPop)
devtools::load_all()
calculateWindowedMetric(mys, PrivateAlleles, window_size = 1000, pop_assignments = pop_assignments)
devtools::load_all()
calculateWindowedMetric(mys, PrivateAlleles, window_size = 1000, pop_assignments = pop_assignments, write_log = TRUE, logfile = "/home/mick/Desktop/log.txt")
devtools::check()
nrow(mys@sep_gt)
tail(mys@fix)
Pi(mys, 265393)
Pi(mys, 265392)
head(mys@fix)
use_test("Pi")
use_test("TajimasD")
TajimasD(mys, 265392
)
devtools::check()
use_test("WattersonsTheta")
WattersonsTheta(mys, 265392)
test_that("WattersonsTheta works", {
load(testthat::test_path("testdata", "mys.RData"))
res <- WattersonsTheta(mys, 265392)
expect_true(round(res, digits = 3) == 0.003)
})
devtools::document()
devtools::document()
devtools::check()
tools::resaveRdaFiles(dir = "data", compress = "bzip2")
tools::resaveRdaFiles(dir = "data", compress = "bzip2")
tools::resaveRdaFiles(dir = "./data", compress = "bzip2")
tools::resaveRdaFiles( compress = "bzip2")
tools::resaveRdaFiles( paths = "./data", compress = "bzip2")
tools::resaveRdaFiles( paths = "./tests/testthat/testdata/", compress = "bzip2")
devtools::check()
devtools::load_all()
data(mys)
head(mys@gt)
head(mys@sep_gt)
head(mys@sep_gt[,1:4])
head(mys@allele_freqs)
PolymorphicSites(mys)
SegregatingSites(mys)
devtools::load_all()
mys1 <- c("8449", "8128", "8779")
mys2 <- c("8816", "8823", "8157")
individuals <- c(mys1, mys2)
pop_names <- c(rep("pop1", length(mys1)), rep("pop2", length(mys2)))
pop_assignments <- setNames(pop_names, individuals)
Dxy(mys, pop_assignments, 265392)
devtools::load_all()
Dxy(mys, pop_assignments, 265392)
Fst(mys, pop_assignments)
mys@allele_freqs[1,]
mys@allele_freqs[1,"1"]
devtools::load_all()
mys@allele_freqs[1,"1"]
Dxy(mys, pop_assignments, 265392)
devtools::load_all()
Dxy(mys, pop_assignments, 265392)
mys@imp_gt[1,]
table(mys@imp_gt[1,])
mys@sep_gt[1,]
mys@sep_gt[2,]
mys@sep_gt[3,]
mys@sep_gt[4,]
mys@sep_gt[5,]
mys@sep_gt[6,]
table(mys@sep_gt[6,])
sum(table(mys@sep_gt[6,]))
table(mys@sep_gt[6,-"."])
mys@sep_gt[6,mys@sep_gt != "."]
mys@sep_gt[6,mys@sep_gt[6,] != "."]
data(real)
r1 <- calculateAlleleFreqs(real)
r2 <- calculateAlleleFreqs(real, missing_data = "impute", method = "mean")
tail(r1@fix)
Pi(r1, 265392)
Pi(r2, 265392)
devtools::load_all()
Pi(r2, 265392)
Pi(r1, 265392)
devtools::load_all()
Dxy(mys, pop_assignments, 265392)
devtools::load_all()
devtools::document()
devtools::load_all()
Dxy(mys, pop_assignments, 265392)
devtools::load_all()
Dxy(mys, pop_assignments, 265392)
mys <- c("8449", "8128", "8779", "8816", "8823", "8157")
dav <- c("8213", "8241", "8232", "8224", "10165", "8221", "8813", "8825", "8182", "8187")
individuals <- c(mys, dav)
pop_names <- c(rep("mys", length(mys)), rep("dav", length(dav)))
pop_assignments <- setNames(pop_names, individuals)
Dxy(r1, pop_assignments, 265392)
Dxy(r2, pop_assignments, 265392)
devtools::load_all()
mys
data(mys)
mys@fix
mys@fix$CHROM
devtools::load_all()
mys
calculateWindowedMetric(r1, Dxy, window_size = 100000, pop_assignments = pop_assignments)
library(GenoPop)
data(sim)
sim@meta
class(sim@meta)
devtools::load_all()
calculateWindowedMetric(r1, Dxy, window_size = 100000, pop_assignments = pop_assignments)
calculateWindowedMetric(r2, Dxy, window_size = 100000, pop_assignments = pop_assignments)
s1 <- calculateAlleleFreqs(sim)
s2 <- calculateAlleleFreqs(sim, missing_data = "impute", method = "mean")
s1@imp_gt
s2@imp_gt
devtools::load_all()
writeVCF(s1, "/home/mick/Desktop/s1.vcf")
devtools::load_all()
writeVCF(s1, "/home/mick/Desktop/s1.vcf")
View(s1@gt)
devtools::load_all()
View(s1@gt)
writeVCF(s1, "/home/mick/Desktop/s1.vcf")
devtools::load_all()
writeVCF(s1, "/home/mick/Desktop/s1.vcf")
devtools::load_all()
writeVCF(s1, "/home/mick/Desktop/s1.vcf")
devtools::load_all()
writeVCF(s1, "/home/mick/Desktop/s1.vcf")
writeVCF(s2, "/home/mick/Desktop/s2.vcf")
writeVCF(r1, "/home/mick/Desktop/r1.vcf")
View(r1@gt)
writeVCF(r2, "/home/mick/Desktop/r2.vcf")
devtools::load_all()
writeVCF(r2, "/home/mick/Desktop/r2.vcf", bgzip = TRUE)
writeVCF(r2, "/home/mick/Desktop/r2.vcf", bgzip = TRUE)
gzfile??
?gzfile
writeVCF(r2, "/home/mick/Desktop/r2.vcf.gz", bgzip = TRUE)
devtools::load_all()
writeVCF(r2, "/home/mick/Desktop/r2.vcf", bgzip = TRUE)
devtools::load_all()
writeVCF(r2, "/home/mick/Desktop/r2.vcf", bgzip = TRUE)
writeVCF(r2, "/home/mick/Desktop/r2.vcf", bgzip = TRUE)
devtools::load_all()
writeVCF(r2, "/home/mick/Desktop/r2.vcf", bgzip = TRUE)
devtools::load_all()
writeVCF(r2, "/home/mick/Desktop/r2.vcf", bgzip = TRUE)
devtools::load_all()
writeVCF(r2, "/home/mick/Desktop/r2.vcf", bgzip = TRUE)
devtools::load_all()
writeVCF(r2, "/home/mick/Desktop/r2.vcf", bgzip = TRUE)
devtools::load_all()
writeVCF(r2, "/home/mick/Desktop/r2.vcf", bgzip = TRUE)
writeVCF(r2, "/home/mick/Desktop/r2.vcf", bgzip = TRUE)
devtools::load_all()
writeVCF(r2, "/home/mick/Desktop/r2.vcf", bgzip = TRUE)
devtools::load_all()
writeVCF(r2, "/home/mick/Desktop/r2.vcf", bgzip = TRUE)
devtools::load_all()
writeVCF(r2, "/home/mick/Desktop/r2.vcf", bgzip = TRUE)
devtools::check()
